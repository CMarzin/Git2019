services:
    # First we define some basic services to make these utilities available in
    # the entire application
    slugger:
        class: AppBundle\Utils\Slugger

    markdown:
        class: AppBundle\Utils\Markdown

    # These are the Twig extensions that create new filters and functions for
    # using them in the templates
    app.twig.app_extension:
        public:    false
        class:     AppBundle\Twig\AppExtension
        arguments: ['@markdown', '%app_locales%']
        tags:
            - { name: twig.extension }

    app.twig.intl_extension:
        public: false
        class:  Twig_Extensions_Extension_Intl
        tags:
            - { name: twig.extension }

    # Event Listeners are classes that listen to one or more specific events.
    # Those events are defined in the tags added to the service definition.
    # See http://symfony.com/doc/current/event_dispatcher.html#creating-an-event-listener
    app.redirect_to_preferred_locale_listener:
        class: AppBundle\EventListener\RedirectToPreferredLocaleListener
        arguments: ['@router', '%app_locales%', '%locale%']
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }

    app.comment_notification:
        class: AppBundle\EventListener\CommentNotificationListener
        arguments: ['@mailer', '@router', '@translator', '%app.notifications.email_sender%']
        # The "method" attribute of this tag is optional and defaults to "on + camelCasedEventName"
        # If the event is "comment.created" the method executed by default is "onCommentCreated()".
        tags:
            - { name: kernel.event_listener, event: comment.created, method: onCommentCreated }

    # Event subscribers are similar to event listeners but they don't need service tags.
    # Instead, the PHP class of the event subscriber includes a method that returns
    # the list of events listened by that class.
    # See http://symfony.com/doc/current/event_dispatcher.html#creating-an-event-subscriber
    app.console_subscriber:
        class: AppBundle\EventListener\ConsoleEventSubscriber
        tags:
            - { name: kernel.event_subscriber }

    # Uncomment the following lines to define a service for the Post Doctrine repository.
    # It's not mandatory to create these services, but if you use repositories a lot,
    # these services simplify your code:
    #
    # app.post_repository:
    #     class:     Doctrine\ORM\EntityRepository
    #     factory:   ['@doctrine.orm.entity_manager', getRepository]
    #     arguments: [AppBundle\Entity\Post]
    #
    # // traditional code inside a controller
    # $entityManager = $this->getDoctrine()->getManager();
    # $posts = $entityManager->getRepository('AppBundle:Post')->findAll();
    #
    # // same code using repository services
    # $posts = $this->get('app.post_repository')->findAll();
